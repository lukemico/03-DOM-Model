import React       from 'react'
import moment      from 'moment'
import injectSheet from 'react-jss'
import {
  styles,
  headerStyles,
  yearSliderStyles,
  monthSliderStyles,
  dayLabelStyles,
  daySelectorStyles,
  dayStyles,
  actionStyles,
}                  from './styles'

const DateInput = injectSheet(styles)(
  class DateInput extends React.Component {
    constructor(props) {
      super(props)
      const active = !!props.active
      const selectedDate = props.selectedDate ? moment(props.selectedDate) : moment()
      const date = props.date ? moment(props.date) : selectedDate
      const lastValue = props.lastValue ? props.lastValue : date
      this.state = {date, selectedDate, active, lastValue}
      this.input = null
    }

    setViewedYear(year) {
      const {date} = this.state
      this.setState({
        date: moment(date).set('year', year),
      })
    }

    setViewedMonth(month) {
      const {date} = this.state
      this.setState({
        date: moment(date).set('month', month),
      })
    }

    selectDay(day) {
      const {date} = this.state
      const selectedDate = moment(date).set('date', day)
      this.setState({selectedDate})
      this.fireInputEvent(selectedDate)
    }

    selectDate(date) {
      const selectedDate = moment(date)
      this.setState({selectedDate})
      this.fireSelectEvent(selectedDate)
    }

    getSelectedDate() {
      return this.formatDate(this.state.selectedDate)
    }

    formatDate(date) {
      return date.format('YYYY-MM-DD')
    }

    fireInputEvent(selectedDate) {
      if (!this.input) return
      this.setNativeValue(this.input, this.formatDate(selectedDate))
      this.input.dispatchEvent(new Event('input', {bubbles: true}))
    }

    fireSelectEvent(selectedDate) {
      // change events dont work so we just call a handler with the value
      if (!this.input) return
      this.setNativeValue(this.input, this.formatDate(selectedDate))
      if (typeof this.props.onSelect === 'function') {
        this.props.onSelect(this.getSelectedDate())
      }
    }

    // fix for onchange not firing dispatchEvents with manual value updates
    // todo move to util
    setNativeValue(element, value) {
      const valueSetter = Object.getOwnPropertyDescriptor(element, 'value').set
      const prototype = Object.getPrototypeOf(element)
      const prototypeValueSetter = Object.getOwnPropertyDescriptor(prototype, 'value').set

      if (valueSetter && valueSetter !== prototypeValueSetter) {
        prototypeValueSetter.call(element, value)
      } else {
        valueSetter.call(element, value)
      }
    }

    render() {
      const {classes, name, onInput, handleCancel, handleOk, label, position} = this.props
      const {date, selectedDate, active, lastValue} = this.state
      return (
        <div className={classes.root}>
          <input
            name={name}
            onInput={e => onInput(e)}
            type="hidden"
            ref={node => this.input = node}
          />
          <div className={classes.header}>
            <Header
              date={date}
              selectedDate={selectedDate}
              active={active}
              onClick={() => {
                if (active) {
                  this.selectDate(selectedDate)
                  if (typeof handleOk === 'function') {
                    handleOk()
                  }
                }
                this.setState({active: !active, lastValue: selectedDate})
              }}
              label={label}
            />
          </div>
          <div
            className={`${classes.calendar} ${(active) ? classes.active : classes.inactive} ${(position === 'static') ? classes.static : ''}`}>
            <div className={classes.sliders}>
              <div className={classes.yearSlider}>
                <YearSlider
                  date={date}
                  selectYear={year => this.setViewedYear(year)}
                />
              </div>
              <div className={classes.monthSlider}>
                <MonthSlider
                  date={date}
                  selectMonth={month => this.setViewedMonth(month)}
                />
              </div>
            </div>
            <div className={classes.dayLabels}>
              <DayLabels/>
            </div>
            <div className={classes.daySelector}>
              <DaySelector
                date={date}
                visibleDate={date}
                selectedDate={selectedDate}
                selectDay={value => this.selectDay(value)}
              />
            </div>
            <div className={classes.actions}>
              <Actions handleCancel={() => {
                this.setState({active: false})
                this.selectDate(lastValue)
                if (typeof handleCancel === 'function') {
                  handleCancel()
                }
              }} handleOk={() => {
                this.setState({active: false, lastValue: selectedDate})
                this.selectDate(selectedDate)
                if (typeof handleOk === 'function') {
                  handleOk()
                }
              }} getValue={() => this.getSelectedDate()}/>
            </div>
          </div>
        </div>
      )
    }
  },
)

const Header = injectSheet(headerStyles)(({classes, selectedDate, active, onClick, label}) => (
  <div className={`${classes.root} ${active ? classes.active : classes.inactive}`} onClick={onClick}>
    <div>
      <span className={classes.summary}>
        {label &&
        <span className={`${classes.label} ${active ? classes.activeLabel : classes.inactiveLabel}`}>{label}</span>}
        <span className={classes.date}>{selectedDate.format('MMM Do, YYYY')}</span>
        </span>
    </div>
  </div>
))

const MonthSlider = injectSheet(monthSliderStyles)(({classes, date, selectMonth}) => {
  // month - 1 because moment().month() reports 1~12, but moment.set('month', n) is 0~11, so 1~12 - 1
  const month = parseInt(date.format('M')) - 1
  return (
    <div className={classes.root}>
      <span className={`${classes.caret} ${classes.leftCaret}`} onClick={() => selectMonth(month - 1)}>&#60;</span>
      <span className={classes.label}>{date.format('MMMM')}</span>
      <span className={`${classes.caret} ${classes.rightCaret}`} onClick={() => selectMonth(month + 1)}>&#62;</span>
    </div>
  )
})

const YearSlider = injectSheet(yearSliderStyles)(({classes, date, selectYear}) => {
  const year = parseInt(date.format('YYYY'))
  return (
    <div className={classes.root}>
      <span className={`${classes.caret} ${classes.leftCaret}`} onClick={() => selectYear(year - 1)}>&#60;</span>
      <span className={classes.label}>{year}</span>
      <span className={`${classes.caret} ${classes.rightCaret}`} onClick={() => selectYear(year + 1)}>&#62;</span>
    </div>
  )
})

const DayLabels = injectSheet(dayLabelStyles)(({classes}) => (
  <div className={classes.root}>
    <span className={classes.day}>S</span>
    <span className={classes.day}>M</span>
    <span className={classes.day}>T</span>
    <span className={classes.day}>W</span>
    <span className={classes.day}>T</span>
    <span className={classes.day}>F</span>
    <span className={classes.day}>S</span>
  </div>
))

const DaySelector = injectSheet(daySelectorStyles)(({classes, date, selectedDate, selectDay}) => {
  const startOfMonth = moment(date).startOf('month')
  const endOfMonth = moment(date).endOf('month')
  const nDaysInMonth = startOfMonth.daysInMonth()
  const nStartDayOfWeek = startOfMonth.day()
  const nEndDayOfWeek = 6 - endOfMonth.day()
  const showSelectedDay = (selectedDate.month() === date.month() && selectedDate.year() === date.year())
  const selectedDay = selectedDate.date()

  const days = [
    printBlankDays(nStartDayOfWeek + 7),
    printMonthDays(nDaysInMonth, selectDay, showSelectedDay, selectedDay),
    printBlankDays(nEndDayOfWeek + 7),
  ]
  return (
    <div className={classes.root}>
      {days}
    </div>
  )
})

const Day = injectSheet(dayStyles)(({classes, number, handleClick, selected}) => (
  <div
    onClick={() => handleClick(number)}
    className={`${classes.root} ${(selected) ? classes.selected : ''}`}
  >
    <div className={`${classes.label} ${(selected) ? classes.selectedLabel : ''}`}>{number}</div>
  </div>
))

const BlankDay = injectSheet(dayStyles)(({classes}) => (
  <div className={classes.root}/>
))

const Actions = injectSheet(actionStyles)(({classes, handleCancel, handleOk, getValue}) => {
    return (
      <div className={classes.root}>
        <button type={'button'} className={classes.button} onClick={e => {
          e.preventDefault()
          handleCancel(e, getValue())
        }}>
          Cancel
        </button>
        <button type={'button'} className={classes.button} onClick={e => {
          e.preventDefault()
          handleOk(e, getValue())
        }}>
          OK
        </button>
      </div>
    )
  },
)

export {DateInput}

function printBlankDays(n) {
  return Array(n).fill(null).map((_, i) => <BlankDay key={i + 1} />)
}

function printMonthDays(n, handleClick, showSelectedDay, selectedDay) {
  return Array(n).fill(null).map((_, i) => (<Day
    handleClick={handleClick}
    key={i + 1}
    number={i + 1}
    selected={showSelectedDay && (i+1) === selectedDay}
  />))
}

function noop() {
  return null
}

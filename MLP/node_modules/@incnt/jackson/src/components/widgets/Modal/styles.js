import color from 'color'
import {css} from 'config/css'

const styles = {
  root: {
    position: props => (props.overlay !== false) ? 'fixed' : 'absolute',
    top: 0,
    right: 0,
    left: 0,
    bottom: 0,
    zIndex: 200,
    transition: css.transitions.slow,
    opacity: 0,
    visibility: 'hidden',
    background: ({type, theme}) => getColorForType(type, theme),
  },
  open: {
    opacity: 1,
    visibility: 'visible',
  },
  overlay: {
    position: 'absolute',
    top: 0,
    right: 0,
    left: 0,
    bottom: 0,
    backgroundColor: ({type, theme}) => getColorForType(type, theme, 0.5),
    opacity: 0.8,
  },
  modal: {
    position: 'absolute',
    left: '50%',
    top: '50%',
    transform: 'translate(-50%, -50%)',
    width: '95%',
    maxWidth: '21em',
    maxHeight: '30em',
    overflowX: 'hidden',
    overflowY: 'auto',
    backgroundColor: ({type, theme}) => getColorForType(type, theme, 0.15),
    boxShadow: css.shadows.low,
    color: ({type, theme}) => getFontColorForType(type, theme),
    borderRadius: '3px',
    fontWeight: '300',
    '@media (min-width: 576px)': {
      width: '32rem',
    },
  },
  header: {
    backgroundColor: ({type, theme}) => getColorForType(type, theme, 0.3),
    borderRadius: '2px 2px m 0',
    padding: '1.25em 1em',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  content: {
    padding: '1.25em 1em',
    fontSize: '1em',
  },
  title: {
    fontSize: '1.25em',
  },
  close: {
    position: 'relative',
    cursor: 'pointer',
    borderRadius: '2px',
    flex: '25px 0 0',
    height: '25px',
    '&:after, &:before': {
      position: 'absolute',
      content: '""',
      background: ({type, theme}) => getFontColorForType(type, theme, 100),
      top: '50%',
      left: '50%',
    },
    '&:before': {
      width: '1px',
      height: '20px',
      transform: 'translate(-50%, -50%) rotate(45deg)',
    },
    '&:after': {
      width: '1px',
      height: '20px',
      transform: 'translate(-50%, -50%) rotate(-45deg)',
    },
  },
}

const getColorForType = (type, theme, shade) => {
  switch (type) {
    case 'error':
      return getErrorColor(theme, shade)
    default:
      return getColor(theme, shade)
  }
}

const getFontColorForType = (type, theme, shade) => {
  switch (type) {
    case 'error':
      return getFontErrorColor(theme, shade)
    default:
      return getFontColor(theme, shade)
  }
}

const getErrorColor = (theme, shade = 0) => {
  switch (theme) {
    case 'dark':
      return color(css.colors.alizarin).darken(shade).hex()
    default:
      return color(css.colors.alizarin).lighten(shade).hex()
  }
}

const getColor = (theme, shade = 0) => {
  switch (theme) {
    case 'dark':
      return color(css.colors.charade).lighten(shade).hex()
    default:
      return color(css.colors.white).darken(shade).hex()
  }
}

const getFontErrorColor = (theme, shade = 0) => {
  switch (theme) {
    case 'dark':
      return color(css.colors.white).lighten(shade).hex()
    default:
      return color(css.colors.black).darken(shade).hex()
  }
}

const getFontColor = (theme, shade = 0) => {
  switch (theme) {
    case 'dark':
      return color(css.colors.white).lighten(shade).hex()
    default:
      return color(css.colors.black).darken(shade).hex()
  }
}


export {styles}
import React from 'react'
import moment from 'moment'
import injectSheet from 'react-jss'
import { styles } from './styles'

class RadioInput extends React.Component {
  constructor(props) {
    super(props)
    const checked = props.checked ? props.checked : false
    const active = props.active ? props.active : false
    this.state = { checked, active }
    this.input = null
  }

  check() {
    const { checked, active } = this.state
    this.setState({
      checked: !checked,
      active: !active
    })
  }

  fireChangeEvent(selectedDate) {
    if (!this.input) return
    this.setNativeValue(this.input, this.check())
    this.input.dispatchEvent(new Event('input', { checked: true }))
  }

  // fix for onchange not firing dispatchEvents with manual value updates
  // todo move to util
  setNativeValue(element, value) {
    const valueSetter = Object.getOwnPropertyDescriptor(element, 'value').set
    const prototype = Object.getPrototypeOf(element)
    const prototypeValueSetter = Object.getOwnPropertyDescriptor(prototype, 'value').set

    if (valueSetter && valueSetter !== prototypeValueSetter) {
      prototypeValueSetter.call(element, value)
    } else {
      valueSetter.call(element, value)
    }
  }

  render() {
    const { classes, name, onInput, className, complete, error } = this.props
    const { checked, active } = this.state
    return (
      <div>
        <input
          className={classes.radioInput}
          name={name}
          onInput={e => onInput(e)}
          type="radio"
          value={checked}
          ref={node => this.input = node}
        />
        <div
          className={getClasses({ className, classes, active, complete, error })}
          onClick={()=>this.check()}
        />
      </div>
    )
  }
}

const getClasses = ({className, classes, active, complete, error}) => {
  let classArray = [classes.root]
  if (active) {
    classArray.push(classes.active)
  }
  if (error && !active) {
    classArray.push(classes.error)
  }
  if (complete && !active) {
    classArray.push(classes.complete)
  }
  if (className) {
    classArray.push(className)
  }
  return classArray.join(' ')
}


const RadioInputComponent = injectSheet(styles)(RadioInput)

export { RadioInputComponent as RadioInput }


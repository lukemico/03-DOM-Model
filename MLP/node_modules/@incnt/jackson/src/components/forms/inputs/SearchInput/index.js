import React                                from 'react'
import injectSheet                          from 'react-jss'
import {styles, searchStyles, resultStyles} from './styles'
import {Icon}                               from 'components/forms/inputs/Icon'

const SearchInput = injectSheet(styles)(
  class SearchInput extends React.Component {
    // todo handle enter keypress
    render() {
      const {onBlur, onInput, onFocus, onSearch, onCancel} = this.props
      const {classes, className, placeholder, results, compact} = this.props
      const {SearchIcon, CancelIcon} = this.props
      const {value, searching} = this.state
      return (
        <div
          className={`${classes.root} ${className || ''}`}
          ref={node => this.wrapperRef = node}
        >
          <Search
            compact={compact}
            classes={classes}
            value={value}
            placeholder={placeholder}
            onFocus={e => {
              this.focus()
              onFocus(e)
            }}
            onBlur={e => {
              this.blur()
              onBlur(e)
            }}
            searchRef={node => this.searchInput = node}
            onInput={e => {
              this.setState({value: e.target.value, searching: !!e.target.value})
              if (typeof onInput === 'function') onInput(e)
            }}
            onSearch={e => {
              this.focus()
              onSearch(e)
            }}
            onCancel={e => {
              this.setState({value: ''})
              onCancel(e)
            }}
            searching={searching}
            SearchIcon={SearchIcon}
            CancelIcon={CancelIcon}
          />
          <Results active={searching} compact={compact}>
            {results}
          </Results>
        </div>
      )
    }

    closeOnClickOutside = (e) => {
      if (this.wrapperRef && !this.wrapperRef.contains(e.target)) {
        this.setState({searching: false})
        if (typeof this.props.onExit === 'function') this.props.onExit(e)
      }
    }

    constructor(props) {
      super(props)
      this.state = {
        searching: props.searching || false,
        value: props.value || '',
      }
    }

    componentDidMount() {
      if (typeof document !== 'undefined') {
        document.addEventListener('mousedown', this.closeOnClickOutside)
      }
    }

    componentWillUnmount() {
      if (typeof document !== 'undefined') {
        document.removeEventListener('mousedown', this.closeOnClickOutside)
      }
    }

    focus() {
      this.setState({searching: true})
      if (this.searchInput) this.searchInput.focus()
    }

    blur() {
      setTimeout(() => this.setState({searching: false}), 100)
      if (this.searchInput) this.searchInput.blur()
    }

    handleSearch(e) {
      this.setState({
        value: e.target.value,
      })
    }
  },
)

// todo add keyboard control
const Search = injectSheet(searchStyles)(({classes, searching, searchRef, value, placeholder, compact, onFocus, onBlur, onInput, onCancel, onSearch, SearchIcon, CancelIcon}) => (
  <div className={`${classes.searchRoot} ${compact ? classes.compactSearchRoot : ''}`}>
    <input
      className={`${classes.input} ${compact ? classes.compactInput : ''}`}
      type="text"
      value={value}
      ref={searchRef}
      onFocus={onFocus}
      onBlur={onBlur}
      onInput={onInput}
      placeholder={placeholder}
    />
    <div className={classes.actions}>
      <div
        className={`${classes.action} ${classes.cancelButton} ${searching ? classes.activeAction : classes.inactiveAction}`}>
        {CancelIcon ? (<CancelIcon onClick={onCancel}/>) : (
          <Icon className={classes.cancelIcon} type={'cancel'} onClick={onCancel}/>)}
      </div>
    </div>
    <div className={classes.searchButton}>
      {SearchIcon ? (<SearchIcon onClick={onSearch}/>) : (
        <Icon className={`${classes.searchIcon} ${!searching && compact ? classes.searchIconRaised : ''}`}
              type={'search'} onClick={onSearch}/>)}
    </div>
  </div>
))

const Results = injectSheet(resultStyles)(({children, classes, active}) => (
  <div className={`${classes.root} ${active ? classes.resultsActive : ''}`}>
    <div className={`${classes.innerContainer} ${active ? classes.innerContainerActive : ''}`}>
      {React.Children.map(children, child => {
        if(!React.isValidElement(child)) return child
        return React.cloneElement(child)
      })}
    </div>
  </div>
))


export {SearchInput}
